import { EventEmitter, Renderer, OnInit, TemplateRef, QueryList } from '@angular/core';
import { TagInputAccessor, TagModel } from './helpers/accessor';
import { TagInputForm } from './tag-input-form/tag-input-form.component';
import { TagInputDropdown } from './dropdown/tag-input-dropdown.component';
import { TagComponent } from './tag/tag.component';
import 'rxjs/add/operator/debounceTime';
export declare class TagInputComponent extends TagInputAccessor implements OnInit {
    private renderer;
    separatorKeys: string[];
    separatorKeyCodes: number[];
    placeholder: string;
    secondaryPlaceholder: string;
    maxItems: number;
    readonly: boolean;
    transform: (item: string) => string;
    validators: any[];
    onlyFromAutocomplete: boolean;
    errorMessages: {
        [key: string]: string;
    };
    theme: string;
    onTextChangeDebounce: number;
    inputId: string;
    inputClass: string;
    clearOnBlur: string;
    hideForm: string;
    addOnBlur: boolean;
    addOnPaste: boolean;
    pasteSplitPattern: string;
    blinkIfDupe: boolean;
    removable: boolean;
    editable: boolean;
    allowDupes: boolean;
    modelAsStrings: boolean;
    trimTags: boolean;
    inputText: string;
    ripple: boolean;
    tabindex: string;
    disabled: any;
    onAdd: EventEmitter<TagModel>;
    onRemove: EventEmitter<TagModel>;
    onSelect: EventEmitter<TagModel>;
    onFocus: EventEmitter<string>;
    onBlur: EventEmitter<string>;
    onTextChange: EventEmitter<TagModel>;
    onPaste: EventEmitter<string>;
    onValidationError: EventEmitter<TagModel>;
    onTagEdited: EventEmitter<TagModel>;
    dropdown: TagInputDropdown;
    templates: QueryList<TemplateRef<any>>;
    inputForm: TagInputForm;
    selectedTag: TagModel;
    isLoading: boolean;
    tags: QueryList<TagComponent>;
    private listeners;
    inputTextChange: EventEmitter<string>;
    inputTextValue: string;
    readonly tabindexAttr: string;
    constructor(renderer: Renderer);
    removeItem(tag: TagModel, index: number): void;
    addItem(isFromAutocomplete?: boolean, item?: TagModel): void;
    isTagValid(tag: TagModel, isFromAutocomplete?: boolean): boolean;
    appendNewTag(tag: TagModel): void;
    createTag(model: TagModel): TagModel;
    selectItem(item: TagModel): void;
    fireEvents(eventName: string, $event?: any): void;
    handleKeydown(data: any): void;
    setInputValue(value: string): string;
    private getControl();
    focus(applyFocus?: boolean, displayAutocomplete?: boolean): void;
    blur(): void;
    hasErrors(): boolean;
    isInputFocused(): boolean;
    hasCustomTemplate(): boolean;
    switchNext(item: TagModel): void;
    switchPrev(item: TagModel): void;
    readonly maxItemsReached: boolean;
    readonly formValue: string;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    private setupSeparatorKeysListener();
    private setUpKeypressListeners();
    private setUpInputKeydownListeners();
    private setUpOnPasteListener();
    private setUpTextChangeSubscriber();
    private setUpOnBlurSubscriber();
    private findDupe(tag, isFromAutocomplete);
    private trackBy(item);
    private onPasteCallback(data);
}
