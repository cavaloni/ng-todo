{"version":3,"file":"tag-input-dropdown.component.js","sourceRoot":"","sources":["tag-input-dropdown.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    Component,\n    ViewChild,\n    forwardRef,\n    Inject,\n    TemplateRef,\n    ContentChildren,\n    Input,\n    QueryList,\n    HostListener\n} from '@angular/core';\n\nimport { TagInputComponent } from '../tag-input';\nimport { Ng2Dropdown, Ng2MenuItem } from 'ng2-material-dropdown';\nimport { EventEmitter } from '@angular/core';\nimport { TagModel } from '../helpers/accessor';\nimport { Observable } from 'rxjs/Observable';\n\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/filter';\n\n@Component({\n    selector: 'tag-input-dropdown',\n    templateUrl: './tag-input-dropdown.template.html'\n})\nexport class TagInputDropdown {\n    /**\n     * @name dropdown\n     */\n    @ViewChild(Ng2Dropdown) public dropdown: Ng2Dropdown;\n\n    /**\n     * @name menuTemplate\n     * @desc reference to the template if provided by the user\n     * @type {TemplateRef}\n     */\n    @ContentChildren(TemplateRef) public templates: QueryList<TemplateRef<any>>;\n\n    /**\n     * @name offset\n     * @type {string}\n     */\n    @Input() public offset = '50 0';\n\n    /**\n     * @name focusFirstElement\n     * @type {boolean}\n     */\n    @Input() public focusFirstElement = false;\n\n    /**\n     * - show autocomplete dropdown if the value of input is empty\n     * @name showDropdownIfEmpty\n     * @type {boolean}\n     */\n    @Input() public showDropdownIfEmpty = false;\n\n    /**\n     * @description observable passed as input which populates the autocomplete items\n     * @name autocompleteObservable\n     */\n    @Input() public autocompleteObservable: (text: string) => Observable<any>;\n\n    /**\n     * - desc minimum text length in order to display the autocomplete dropdown\n     * @name minimumTextLength\n     */\n    @Input() public minimumTextLength = 1;\n\n    /**\n     * - number of items to display in the autocomplete dropdown\n     * @name limitItemsTo\n     */\n    @Input() public limitItemsTo: number;\n\n    /**\n     * @name displayBy\n     */\n    @Input() public displayBy = 'display';\n\n    /**\n     * @name identifyBy\n     */\n    @Input() public identifyBy = 'value';\n\n    /**\n     * @description a function a developer can use to implement custom matching for the autocomplete\n     * @name matchingFn\n     */\n    @Input() public matchingFn: (value: string, target: TagModel) => boolean =\n         (value: string, target: TagModel): boolean => {\n            const targetValue = target[this.displayBy].toString();\n\n            return targetValue && targetValue\n                .toLowerCase()\n                .indexOf(value.toLowerCase()) >= 0;\n    }\n\n    /**\n     * @name appendToBody\n     * @type {boolean}\n     */\n    @Input() public appendToBody = true;\n\n    /**\n     * list of items that match the current value of the input (for autocomplete)\n     * @name items\n     * @type {TagModel[]}\n     */\n    public items: TagModel[] = [];\n\n    /**\n     * @name _autocompleteItems\n     * @type {Array}\n     * @private\n     */\n    private _autocompleteItems: TagModel[] = [];\n\n    /**\n     * @name autocompleteItems\n     * @param items\n     */\n    public set autocompleteItems(items: TagModel[]) {\n        this._autocompleteItems = items;\n    }\n\n    /**\n     * @name autocompleteItems\n     * @desc array of items that will populate the autocomplete\n     * @type {Array<string>}\n     */\n    @Input() public get autocompleteItems(): TagModel[] {\n        const items = this._autocompleteItems;\n\n        if (!items) {\n            return [];\n        }\n\n        return items.map((item: TagModel) => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n    }\n\n    constructor(@Inject(forwardRef(() => TagInputComponent)) private tagInput: TagInputComponent) {}\n\n    public ngOnInit() {\n        this.onItemClicked()\n            .subscribe(this.addNewItem.bind(this));\n\n        // reset itemsMatching array when the dropdown is hidden\n        this.onHide()\n            .subscribe(this.resetItems.bind(this));\n\n        this.tagInput.inputForm.onKeyup\n            .subscribe(this.show.bind(this));\n\n        if (this.autocompleteObservable) {\n            this.tagInput\n                .onTextChange\n                .filter((text: string) => text.trim().length >= this.minimumTextLength)\n                .subscribe(this.getItemsFromObservable.bind(this));\n        }\n    }\n\n    /**\n     * @name updatePosition\n     */\n    public updatePosition(): void {\n        this.dropdown.menu.updatePosition(this.tagInput.inputForm.getElementPosition());\n    }\n\n    /**\n     * @name isVisible\n     * @returns {boolean}\n     */\n    public get isVisible(): boolean {\n        return this.dropdown.menu.state.menuState.isVisible;\n    }\n\n    /**\n     * @name onHide\n     * @returns {EventEmitter<Ng2Dropdown>}\n     */\n    public onHide(): EventEmitter<Ng2Dropdown> {\n        return this.dropdown.onHide;\n    }\n\n    /**\n     * @name onItemClicked\n     * @returns {EventEmitter<string>}\n     */\n    public onItemClicked(): EventEmitter<string> {\n        return this.dropdown.onItemClicked;\n    }\n\n    /**\n     * @name selectedItem\n     * @returns {Ng2MenuItem}\n     */\n    public get selectedItem(): Ng2MenuItem {\n        return this.dropdown.menu.state.dropdownState.selectedItem;\n    }\n\n    /**\n     * @name state\n     * @returns {DropdownStateService}\n     */\n    public get state(): any {\n        return this.dropdown.menu.state;\n    }\n\n    /**\n     * @name addNewItem\n     * @param item {Ng2MenuItem}\n     */\n    private addNewItem(item: Ng2MenuItem): void {\n        if (!item) {\n            return;\n        }\n\n        const display = typeof item.value === 'string' ? item.value : item.value[this.displayBy];\n        const value = typeof item.value === 'string' ? item.value : item.value[this.identifyBy];\n        const model = {...item.value, display, value};\n\n        // add item\n        this.tagInput.addItem(true, model);\n\n        // hide dropdown\n        this.dropdown.hide();\n    }\n\n    /**\n     *\n     * @name show\n     */\n    public show(): void {\n        const value: string = this.tagInput.inputForm.value.value.trim();\n        const position: ClientRect = this.tagInput.inputForm.getElementPosition();\n        const items: TagModel[] = this.getMatchingItems(value);\n        const hasItems: boolean = items.length > 0;\n        const showDropdownIfEmpty: boolean = this.showDropdownIfEmpty && hasItems && !value;\n        const hasMinimumText: boolean = value.length >= this.minimumTextLength;\n\n        const assertions: boolean[] = [\n            hasItems,\n            this.isVisible === false,\n            hasMinimumText\n        ];\n\n        const showDropdown: boolean = (assertions.filter(item => item).length === assertions.length) ||\n            showDropdownIfEmpty;\n        const hideDropdown: boolean = this.isVisible && (!hasItems || !hasMinimumText);\n\n        // set items\n        this.setItems(items);\n\n        if (showDropdown && !this.isVisible) {\n            this.dropdown.show(position);\n        } else if (hideDropdown) {\n            this.dropdown.hide();\n        }\n    }\n\n    /**\n     * @name scrollListener\n     */\n    @HostListener('window:scroll')\n    public scrollListener(): void {\n        if (!this.isVisible) {\n            return;\n        }\n\n        this.updatePosition();\n    }\n\n    /**\n     *\n     * @param value\n     * @returns {any}\n     */\n    private getMatchingItems(value: string): TagModel[] {\n        if (!value && !this.showDropdownIfEmpty) {\n            return [];\n        }\n\n        return this.autocompleteItems.filter((item: TagModel) => {\n            const hasValue: boolean = this.tagInput.tags.some(tag => {\n                const identifyBy = this.tagInput.identifyBy;\n                const model = typeof tag.model === 'string' ? tag.model : tag.model[identifyBy];\n\n                return model === item[this.identifyBy];\n            });\n\n            return this.matchingFn(value, item) && hasValue === false;\n        });\n    }\n\n    /**\n     * @name setItems\n     */\n    private setItems(items: TagModel[]): void {\n        this.items = items.slice(0, this.limitItemsTo || items.length);\n    }\n\n    /**\n     * @name resetItems\n     */\n    private resetItems(): void {\n        this.items = [];\n    }\n\n    /**\n     * @name populateItems\n     * @param data\n     */\n    private populateItems(data: any): TagInputDropdown {\n        this.autocompleteItems = data.map(item => {\n            return typeof item === 'string' ? {\n                [this.displayBy]: item,\n                [this.identifyBy]: item\n            } : item;\n        });\n\n        return this;\n    }\n\n    /**\n     * @name getItemsFromObservable\n     * @param text\n     */\n    private getItemsFromObservable(text: string): void {\n        this.setLoadingState(true);\n\n        this.autocompleteObservable(text)\n            .subscribe(data => {\n                // hide loading animation\n                this.setLoadingState(false)\n                    // add items\n                    .populateItems(data)\n                    // show the dropdown\n                    .show();\n\n        }, () => this.setLoadingState(false));\n    }\n\n    /**\n     * @name setLoadingState\n     * @param state\n     * @return {TagInputDropdown}\n     */\n    private setLoadingState(state: boolean): TagInputDropdown {\n        this.tagInput.isLoading = state;\n\n        return this;\n    }\n}\n"]}